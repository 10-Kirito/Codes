#include<stdio.h>
main()
{
    int a[128],b[128];
    int i,code,k,m,n,s,t;
    printf("输入初始报数上限值m:");
    scanf("%d",&m); 
    if(m <= 0)
    {
        return;
    }
    printf("输入人数n:"); 
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&code); 
        b[i]=code;
    }
    printf("指定开始报数人的编号t:");//第一个参照人的编号为1
    scanf("%d",&t); 
    k=0;
    for(i=t-1;i<n;i++)a[k++]=b[i];
    for(i=0;i<t-1;i++)a[k++]=b[i];
    k=0;
    while(n!=1){
        s=m%n;
        if(k!=0)s=(s+k-2)%n+1;
        printf(" %d ",a[s-1]);
        for(i=s-1;i<n-1;i++)
	a[i]=a[i+1];          
        k=s;
        n--;
   }
   printf(" %d ",a[0]);
}

汇编实现：  这个汇编的方案我当时写了没有发表，相信没有其它人比我先发表这个方案吧！本方案已经运行测试。
;本程序是用汇编语言实现约约瑟夫环
;它最大支持255人的报数和人数
;它的密码要事先要在数据段初始化
;它的例子是从第一个报数为顺序进行密码编码的，当然可以自己编码
;人数和报数要事先要初始化
;它支持在DOS下运行并显示结果
;软件需求：LINK.EXE和MASM.EXE
          M1 EQU 6                ;初始报数上限值m:
          N EQU 6                 ;人数n:
DATA SEGMENT
SOURCE DB 01H,02H,03H,04H,05H,06H ;对应人的密码
RESULT DB N DUP(0)
M      DB 00H                     ;输出控制数
M2     DB 00H                     ;输出数据区指示变量
DATA ENDS
SSEG SEGMENT PARA STACK 'STACK'
DB  256 DUP(?)
SSEG ENDS
CODE SEGMENT
      ASSUME CS:CODE,DS:DATA,SS:SSEG,ES:DATA
START:PUSH DS
      XOR AX,AX
      PUSH AX
      MOV AX,DATA
      MOV DS,AX
      MOV ES,AX      
      MOV DH,0                     ;k=0
      MOV DL,N
      CMP DL,1
      JZ LOP2                     ;while(n!=1){
LOP1: MOV AL,M1                    ;s=m%n
      CMP AL,DL
      JB LOP4
LOP3: SUB AL,DL
      CMP AL,DL
      JNB LOP3     
LOP4: CMP DH,0            ;if(k!=0)s=(s+k-2)%n+1
      JE  LOP5
      ADD AL,DH
      SUB AL,2    
      CMP AL,DL
      JB LOP6
      SUB AL,DL
LOP6: ADD AL,1
LOP5: MOV AH,0 
      MOV CL,AL         ;CL---s
      DEC AL            ;AL---s-1
      MOV BX,AX
      MOV AL,SOURCE[BX] ;printf(" %d ",a[s-1])
      MOV BL,M2
      MOV BH,0
      MOV RESULT[BX],AL
      INC BL
      MOV M2,BL
      MOV AL,CL
      SUB AL,1
      MOV CH,AL        ;for(i=s-1;i<n-1;i++)a[i]=a[i+1]
      MOV AL,DL        ;AL--n
      SUB AL,1         ;AL--n-1
      CMP CH, AL       ;CH--i=s-1     
      JNB LOP7
LOP8: MOV AL,CH
      MOV AH,0
      MOV BX,AX
      MOV AL,SOURCE[BX+1]
      MOV SOURCE[BX],AL    
      INC CH
      MOV AL,DL
      SUB AL,1
      CMP CH, AL      ;i<n-1
      JB LOP8
LOP7: MOV DH,CL                    ;k=s
      DEC DL                       ;n--
      CMP DL,1
      JNE LOP1
LOP2: MOV BX,0
      MOV AL,SOURCE[BX]             ;printf(" %d ",a[0])
      MOV BX,N-1
      MOV RESULT[BX],AL
      LEA DI,RESULT
      MOV M,N
LOP0: MOV AL,[DI]
      AND AL,0F0H
      MOV CL,4
      SHR AL,CL
      CMP AL,9
      JA X1
      ADD AL,30H
      MOV BL,AL
      MOV AH,02H
      MOV DL,BL
      INT 21H
      JMP X2
X1:   CMP AL,61H
      JA X5
      ADD AL,40H
      SUB AL,09H
      MOV BL,AL
      MOV AH,02H
      MOV DL,BL
      INT 21H
      JMP X2
X5:   ADD AL,20H
      MOV BL,AL
      MOV AH,02H
      MOV DL,BL
      INT 21H
X2:   MOV AL,[DI]
      AND AL,0FH
      CMP AL,9
      JA X3
      ADD AL,30H
      MOV BL,AL
      MOV AH,02H
      MOV DL,BL
      INT 21H
      JMP X6
X3:   CMP AL,61H
      JA X4
      ADD AL,40H
      SUB AL,09H
      MOV BL,AL
      MOV AH,02H
      MOV DL,BL
      INT 21H
      JMP X6
X4:   ADD AL,20H
      MOV BL,AL
      MOV AH,02H
      MOV DL,BL
      INT 21H
X6:   INC DI
      DEC M
      JNZ LOP0
      RET
CODE ENDS
END START
