Microsoft (R) Macro Assembler Version 6.11		    11/26/22 14:29:23
tempfile.asm						     Page 1 - 1


				; 该程序实现了电话簿的基本功能：
				; 增删查改
				; 输出整个电话簿
				assume ds:data,cs:code,ss:stacks
 0000				data segment
 0000 0000			    sum dw 0        ;记录当前电话簿中有多少联系人
 0002 14			    namemax db 20   ;用来存储临时输入的联系人姓名
 0003 00			    _length db ?
 0004  0014 [			    _name db 20 dup(' ')
        20
       ]
 0018  0050 [			    tel_tab db 80 dup(20,?,20 dup(' '),32,12,?,12 dup(0),32);存储人名和电话号码
        14 00
        0014 [
	 20
	] 20 0C 00
        000C [
	 00
	] 20
       ]
 0BF8 0D 0A 2D 2D 2D 2D		    menu db 13,10,"---------------menu-----------------",13,10
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 6D
       65 6E 75 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 0D 0A
 0C20 2D 2D 41 64 64 20		    menu1 db "--Add a people to the table--------1",13,10   
       61 20 70 65 6F 70
       6C 65 20 74 6F 20
       74 68 65 20 74 61
       62 6C 65 2D 2D 2D
       2D 2D 2D 2D 2D 31
       0D 0A
 0C46 2D 2D 44 65 6C 65		    menu2 db "--Delete a people from table-------2",13,10   
       74 65 20 61 20 70
       65 6F 70 6C 65 20
       66 72 6F 6D 20 74
       61 62 6C 65 2D 2D
       2D 2D 2D 2D 2D 32
       0D 0A
 0C6C 2D 2D 53 65 61 72		    menu3 db "--Search a people from table-------3",13,10   
       63 68 20 61 20 70
       65 6F 70 6C 65 20
       66 72 6F 6D 20 74
       61 62 6C 65 2D 2D
       2D 2D 2D 2D 2D 33
       0D 0A
 0C92 2D 2D 43 68 61 6E		    menu6 db "--Change detail of the people------4",13,10   
       67 65 20 64 65 74
       61 69 6C 20 6F 66
       20 74 68 65 20 70
       65 6F 70 6C 65 2D
       2D 2D 2D 2D 2D 34
       0D 0A
 0CB8 2D 2D 53 68 6F 77		    menu7 db "--Show all detail of the book------5",13,10   
       20 61 6C 6C 20 64
       65 74 61 69 6C 20
       6F 66 20 74 68 65
       20 62 6F 6F 6B 2D
       2D 2D 2D 2D 2D 35
       0D 0A
 0CDE 2D 2D 65 78 69 74		    menu4 db "--exit-----------------------------0",13,10   
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 30
       0D 0A
 0D04 50 6C 65 61 73 65		    menu5 db "Please input num to choose (0-5): ",'$'
       20 69 6E 70 75 74
       20 6E 75 6D 20 74
       6F 20 63 68 6F 6F
       73 65 20 28 30 2D
       35 29 3A 20 24
 0D27 50 6C 65 61 73 65		    temp db "Please input name: ","$"
       20 69 6E 70 75 74
       20 6E 61 6D 65 3A
       20 24
 0D3B 0D 0A 50 6C 65 61		    tel_num db 13,10,"Please input the phone_num(11-digit): ","$"
       73 65 20 69 6E 70
       75 74 20 74 68 65
       20 70 68 6F 6E 65
       5F 6E 75 6D 28 31
       31 2D 64 69 67 69
       74 29 3A 20 24
 0D64 0D 0A 24			    CRLF db 13,10,'$'
 0D67 50 6C 65 61 73 65		    method db "Please input name:",'$'
       20 69 6E 70 75 74
       20 6E 61 6D 65 3A
       24
 0D7A 50 6C 65 61 73 65		    method_0 db "Please input the name to delete:",'$'
       20 69 6E 70 75 74
       20 74 68 65 20 6E
       61 6D 65 20 74 6F
       20 64 65 6C 65 74
       65 3A 24
 0D9B 0D 0A 54 68 65 20		    temp6 db 13,10,"The table is empty!",'$'
       74 61 62 6C 65 20
       69 73 20 65 6D 70
       74 79 21 24
 0DB1 0D 0A 46 61 69 6C		    temp7 db 13,10,"Failed to find the people!",'$'
       65 64 20 74 6F 20
       66 69 6E 64 20 74
       68 65 20 70 65 6F
       70 6C 65 21 24
 0DCE 0D 0A 54 68 65 20		    temp8 db 13,10,"The telephone book is below:",13,10,'$'
       74 65 6C 65 70 68
       6F 6E 65 20 62 6F
       6F 6B 20 69 73 20
       62 65 6C 6F 77 3A
       0D 0A 24
 0DEF 0D 0A 50 6C 65 61		    temp9 db 13,10,"Please input the name you want to change:",'$'
       73 65 20 69 6E 70
       75 74 20 74 68 65
       20 6E 61 6D 65 20
       79 6F 75 20 77 61
       6E 74 20 74 6F 20
       63 68 61 6E 67 65
       3A 24
 0E1B 0D 0A 50 6C 65 61		    temp10 db 13,10,"Please input the number you want:",'$'
       73 65 20 69 6E 70
       75 74 20 74 68 65
       20 6E 75 6D 62 65
       72 20 79 6F 75 20
       77 61 6E 74 3A 24
 0E3F 0D 0A 43 68 61 6E		    temp11 db 13,10,"Change the detail of the man successfully!",13,10,'$'
       67 65 20 74 68 65
       20 64 65 74 61 69
       6C 20 6F 66 20 74
       68 65 20 6D 61 6E
       20 73 75 63 63 65
       73 73 66 75 6C 6C
       79 21 0D 0A 24
				
 0E6E				data ends
 0000				stacks segment stack
 0000  0014 [			    dw 20 dup(?)
        0000
       ]
 0028				stacks ends
				
				; 定义宏，输出菜单
				show_menu macro 
				    mov dx,offset menu    mov ah,09h    int 21Hendm 
				
				;定义宏指令，用来清屏用
				clear   macro a,b,c,d
				    mov     al,0    mov     bh,7    mov     ch,a
				    mov     cl,b
				    mov     dh,c
				    mov     dl,d
				    mov     ah,6    int     10hendm
				;设置光标在 (y，x)位置，设置光标行列位置
				post_c  macro y,x           
				    mov bh,0       	mov ah,2         	mov dh,y       
					mov dl,x         
					int 10h         endm
				
				; 定义宏，回车
				CF macro
				    mov dx,offset CRLF    mov ah,09h    int 21Hendm
				
				code segment
				start:
				    mov ax,data
				    mov ds,ax
				    mov ax,stacks
				    mov ss,ax
				main_loop:
				    clear 0,0,24,79 ; 清屏
				    post_c 0,0
				main_loop0:
				    show_menu ; 输出菜单
				    mov ah,1 ;从键盘输入数字选择
				    int 21H     
 0000				    push ax
 0000				
 0000  B8 ---- R		    block_loop:
 0003  8E D8			    mov     ah,0
 0005  B8 ---- R		    int     16h
 0008  8E D0			    cmp     ah,1ch
 000A				    jne     block_loop
				
 000A  B0 00		     1	    mov     al,0
 000C  B7 07		     1	    mov     bh,7
 000E  B5 00		     1	    mov     ch,0
 0010  B1 00		     1	    mov     cl,0
 0012  B6 18		     1	    mov     dh,24
 0014  B2 4F		     1	    mov     dl,79
 0016  B4 06		     1	    mov     ah,6
 0018  CD 10		     1	    int     10h
				    CF                  ;输出回车
 001A  B7 00		     1	    mov bh,0       
 001C  B4 02		     1		mov ah,2         
 001E  B6 00		     1		mov dh,0       
 0020  B2 00		     1		mov dl,0         
 0022  CD 10		     1		int 10h         
 0024				    pop ax
				    xor ah,ah
 0024  BA 0BF8 R	     1	    mov dx,offset menu
 0027  B4 09		     1	    mov ah,09h
 0029  CD 21		     1	    int 21H
 002B  B4 01			    cmp ax,0030h
 002D  CD 21			    je return           ;如果输入的是0，则结束程序
 002F  50			    cmp ax,0031h
				    je loop1            ;如果输入的是1，2，3，4,5，则进入子程序
 0030				    cmp ax,0032h
 0030  B4 00			    je loop2
 0032  CD 16			    cmp ax,0033h
 0034  80 FC 1C			    je loop3
 0037  75 F7			    cmp ax,0034h
				    je loop4
				    cmp ax,0035h
 0039  BA 0D64 R	     1	    mov dx,offset CRLF
 003C  B4 09		     1	    mov ah,09h
 003E  CD 21		     1	    int 21H
 0040  58			    je loop5
 0041  32 E4			    jmp main_loop
 0043  83 F8 30			
 0046  74 1B			return: 
 0048  83 F8 31			    mov ah,4CH
 004B  74 1A			    int 21H
 004D  83 F8 32			loop1:
 0050  74 1A			    call add_man
 0052  83 F8 33			    jmp main_loop
 0055  74 1A			loop2:
 0057  83 F8 34			    call del_man
 005A  74 1A			    jmp main_loop0
 005C  83 F8 35			loop3:
 005F  74 1A			    call sear_man
 0061  EB A7			    jmp main_loop0
				loop4:
 0063				    call change
 0063  B4 4C			    jmp main_loop0
 0065  CD 21			loop5:
 0067				    call show_book
 0067  E8 007B			    jmp main_loop0
 006A  EB 9E			
 006C				;输出所有联系人
 006C  E8 00B3			show_book proc near
 006F  EB B3			    mov dx,offset temp8
 0071				    mov ah,09h
 0071  E8 018F			    int 21h
 0074  EB AE			
 0076				    push sum
 0076  E8 0239			    cmp sum,0
 0079  EB A9			    je show_empty  	;如果电话簿为空的话，输出相应信息
 007B				    mov cx,sum
 007B  E8 0002			    
 007E  EB A4			
				    mov si,offset tel_tab
				show_big:
 0080				    push cx			;外层循环，遍历每一位联系人
 0080  BA 0DCE R		    add si,1
 0083  B4 09			    mov cl,ds:[si]
 0085  CD 21			    xor ch,ch
				    add si,1
 0087  FF 36 0000 R		    push si
 008B  83 3E 0000 R 00		show_name:			;输出姓名
 0090  74 47			    mov dl,ds:[si]
 0092  8B 0E 0000 R		    mov ah,02h
				    int 21H
				    inc si
 0096  BE 0018 R		    loop show_name
 0099				
 0099  51			    pop si
 009A  83 C6 01			    add si,22
 009D  8A 0C			    mov cl,ds:[si]
 009F  32 ED			    xor ch,ch
 00A1  83 C6 01			    add si,1
 00A4  56			    push si
 00A5				    
 00A5  8A 14			    mov dl,' '
 00A7  B4 02			    mov ah,02h
 00A9  CD 21			    int 21H
 00AB  46			show_phonenum:		;输出电话号码
 00AC  E2 F7			    mov dl,ds:[si]
				    mov ah,02h
 00AE  5E			    int 21H
 00AF  83 C6 16			    inc si
 00B2  8A 0C			    loop show_phonenum
 00B4  32 ED			    CF
 00B6  83 C6 01			
 00B9  56			    pop si
				    add si,13
 00BA  B2 20			    pop cx
 00BC  B4 02			    loop show_big
 00BE  CD 21			    jmp show_ret
 00C0				
 00C0  8A 14			show_empty:
 00C2  B4 02			    mov dx,offset temp6
 00C4  CD 21			    mov ah,09h
 00C6  46			    int 21h
 00C7  E2 F7			show_ret:
				    pop sum
 00C9  BA 0D64 R	     1	    mov dx,offset CRLF
 00CC  B4 09		     1	    mov ah,09h
 00CE  CD 21		     1	    int 21H
				    ret
 00D0  5E			show_book endp
 00D1  83 C6 0D			
 00D4  59			add_man proc near	;添加联系人
 00D5  E2 C2			    lea dx,temp
 00D7  EB 07			    mov ah,09h  
				    int 21H
 00D9				    mov dx,offset tel_tab
 00D9  BA 0D9B R		    push sum
 00DC  B4 09			init:				;初始化该联系人存放的内存位置
 00DE  CD 21			    cmp sum,0
 00E0				    je add_loop
 00E0  8F 06 0000 R		    add dx,38
 00E4  C3			    sub sum,1
 00E5				    jmp init
				add_loop:
 00E5				    pop sum
 00E5  8D 16 0D27 R		    mov ah,0ah
 00E9  B4 09			    int 21H
 00EB  CD 21			    push dx
 00ED  BA 0018 R		
 00F0  FF 36 0000 R		    mov dx,offset tel_num
 00F4				    mov ah,09h
 00F4  83 3E 0000 R 00		    int 21H
 00F9  74 0A			
 00FB  83 C2 26			    pop dx
 00FE  83 2E 0000 R 01		    add dx,23
 0103  EB EF			    mov ah,0ah
 0105				    int 21h
 0105  8F 06 0000 R		    
 0109  B4 0A			    inc sum			;计数器加一
 010B  CD 21			    ret
 010D  52			add_man endp
				
 010E  BA 0D3B R		;删除联系人
 0111  B4 09			del_man proc near
 0113  CD 21			    push sum;暂存联系人的人数
				    
 0115  5A			    mov dx,offset method_0
 0116  83 C2 17			    mov ah,09h
 0119  B4 0A			    int 21H
 011B  CD 21			
				    ;输入要删除的联系人
 011D  FF 06 0000 R		    mov dx,offset namemax
 0121  C3			    mov ah,0ah
 0122				    int 21H
				
				    cmp sum,1
 0122				    je dele_brige2
 0122  FF 36 0000 R		
				    ;取出比较的次数
 0126  BA 0D7A R		    mov cl,_length
 0129  B4 09			    xor ch,ch
 012B  CD 21			    ;初始化电话簿的地址
				    mov si,offset tel_tab
				    add si,2
 012D  BA 0002 R		    mov di,seg _name
 0130  B4 0A			    mov es,di
 0132  CD 21			    mov di,offset _name
				    mov bx,0		;计数器，记录我们要删除的联系人的位置
 0134  83 3E 0000 R 01		    cmp sum,0
 0139  74 48			    je dele_brige	;如果sum一开始就为0，即为空的，肯定找不到
				dele_loop4:
				    cmp sum,0		;此时肯定不会满足条件，所以开始寻找
 013B  8A 0E 0003 R		    je dele_brige1	;由于跳转的位置距离此处太远所以需要跳板
 013F  32 ED			    inc bx
				dele_cmp:
 0141  BE 0018 R		    push bx
 0144  83 C6 02			    mov al,ds:[si]
 0147  BF ---- R		    mov bl,es:[di]
 014A  8E C7			    cmp al,bl
 014C  BF 0004 R		    pop bx
 014F  BB 0000			    jne dele_nomatch
 0152  83 3E 0000 R 00		    inc si
 0157  74 26			    inc di
 0159				    loop dele_cmp
 0159  83 3E 0000 R 00		    jmp dele_suce
 015E  74 21			dele_nomatch:
 0160  43			    add si,38
 0161				    mov di,offset _name
 0161  53			    sub sum,1
 0162  8A 04			    jmp dele_loop4
 0164  26: 8A 1D		dele_brige:
 0167  38 D8			    jmp dele_empty
 0169  5B			dele_brige1:
 016A  75 06			    jmp dele_fail
 016C  46			dele_brige2:
 016D  47			    jmp dele_only
 016E  E2 F1			;查找成功
 0170  EB 13			;找到并初始化我们要删除的联系人的位置
 0172				dele_suce:
 0172  83 C6 26			    mov cx,bx
 0175  BF 0004 R		    sub cx,1
 0178  83 2E 0000 R 01		    mov si,offset tel_tab
 017D  EB DA			dele_init:
 017F				    cmp cx,0
 017F  EB 76			    je dele_init_
 0181				    add si,38
 0181  EB 68			    loop dele_init
 0183				
 0183  EB 55			dele_init_:
				;初始化最后一位联系人的位置
				    pop cx;取出当前联系人的总人数
 0185				    push cx
 0185  8B CB			
 0187  83 E9 01			    mov di,seg _name
 018A  BE 0018 R		    mov es,di
 018D				    mov di,offset tel_tab
 018D  83 F9 00			    sub cx,1;如果当前总人数为1的话，就不需要循环初始化
 0190  74 05			    cmp cx,0
 0192  83 C6 26			    je _exchange
 0195  E2 F6			dele_loop:
				    add di,38
 0197				    loop dele_loop
				    push si
 0197  59			    push di
 0198  51			;交换最后一位联系人和我们要删除的联系人的姓名位置
				_exchange:
 0199  BF ---- R		    mov cx,22
 019C  8E C7			_xchange:
 019E  BF 0018 R		    mov al,es:[di]
 01A1  83 E9 01			    mov byte ptr ds:[si],al
 01A4  83 F9 00			    inc di
 01A7  74 07			    inc si
 01A9				    loop _xchange
 01A9  83 C7 26			    ;交换相应联系人电话号码
 01AC  E2 FB			    pop di
 01AE  56			    pop si
 01AF  57			    add si,23
				    add di,23
 01B0				    mov cx,14
 01B0  B9 0016			_xchange_num:
 01B3				    mov al,es:[di]
 01B3  26: 8A 05		    mov byte ptr ds:[si],al
 01B6  88 04			    inc di
 01B8  47			    inc si
 01B9  46			    loop _xchange_num
 01BA  E2 F7			dele_exit:
				    pop sum
 01BC  5F			;删除一个联系人之后，总人数减少
 01BD  5E			    sub sum,1
 01BE  83 C6 17			    ret
 01C1  83 C7 17			dele_only:
 01C4  B9 000E			    mov dx,offset temp11
 01C7				    mov ah,09h
 01C7  26: 8A 05		    int 21H
 01CA  88 04			    pop sum
 01CC  47			    sub sum,1
 01CD  46			    ret
 01CE  E2 F7			;查找失败
 01D0				dele_fail:
 01D0  8F 06 0000 R		    mov dx,offset temp7
				    mov ah,09h
 01D4  83 2E 0000 R 01		    int 21H
 01D9  C3			    pop sum
 01DA				    ret
 01DA  BA 0E3F R		;表为空
 01DD  B4 09			dele_empty:
 01DF  CD 21			    mov dx,offset temp6
 01E1  8F 06 0000 R		    mov ah,09h
 01E5  83 2E 0000 R 01		    int 21H
 01EA  C3			    pop sum
				    ret
 01EB				del_man endp
 01EB  BA 0DB1 R		
 01EE  B4 09			;寻找联系人
 01F0  CD 21			sear_man proc near
 01F2  8F 06 0000 R		    push sum;暂存联系人的人数
 01F6  C3			    mov dx,offset method
				    mov ah,09h
 01F7				    int 21H
 01F7  BA 0D9B R		
 01FA  B4 09			    ;输入要寻找的联系人
 01FC  CD 21			    mov dx,offset namemax
 01FE  8F 06 0000 R		    mov ah,0ah
 0202  C3			    int 21H
 0203				
				    ;取出比较的次数
				    mov cl,_length
 0203				    xor ch,ch
 0203  FF 36 0000 R		    ;初始化电话簿的地址
 0207  BA 0D67 R		    mov si,offset tel_tab
 020A  B4 09			    add si,2
 020C  CD 21			    mov di,seg _name
				    mov es,di
				    mov di,offset _name
 020E  BA 0002 R		    mov bx,0
 0211  B4 0A			    cmp sum,0
 0213  CD 21			    je sear_empty;如果sum一开始就为0，即为空的，肯定找不到
				sear_loop4:
				    cmp sum,0;此时肯定不会满足条件，所以开始寻找
 0215  8A 0E 0003 R		    je sear_fail
 0219  32 ED			    inc bx
				sear_cmp:
 021B  BE 0018 R		    push bx
 021E  83 C6 02			    mov al,ds:[si]
 0221  BF ---- R		    mov bl,es:[di]
 0224  8E C7			    cmp al,bl
 0226  BF 0004 R		    pop bx
 0229  BB 0000			    jne nomatch
 022C  83 3E 0000 R 00		    inc si
 0231  74 76			    inc di
 0233				    loop sear_cmp
 0233  83 3E 0000 R 00		    jmp sear_suce
 0238  74 66			nomatch:
 023A  43			    add si,38
 023B				    mov di,offset _name
 023B  53			    sub sum,1
 023C  8A 04			    jmp sear_loop4
 023E  26: 8A 1D		
 0241  38 D8			;查找成功
 0243  5B			sear_suce:
 0244  75 06			    mov cx,bx
 0246  46			    sub cx,1
 0247  47			    mov si,offset tel_tab
 0248  E2 F1			_init:
 024A  EB 0D			    cmp cx,0
 024C				    je _output
 024C  83 C6 26			    add si,38
 024F  BF 0004 R		    loop _init
 0252  83 2E 0000 R 01		
 0257  EB DA			
				_output: 
				    add si,25
 0259				    push si
 0259  8B CB			    mov si,offset _name
 025B  83 E9 01			    mov cl,_length
 025E  BE 0018 R		    xor ch,ch
 0261				    CF
 0261  83 F9 00			_out_name:
 0264  74 05			    mov dl,ds:[si]
 0266  83 C6 26			    mov ah,02h
 0269  E2 F6			    int 21H
				    inc si
				    loop _out_name
 026B				
 026B  83 C6 19			    pop si
 026E  56			    mov cx,11
 026F  BE 0004 R		    mov dl,' '
 0272  8A 0E 0003 R		    mov ah,02h
 0276  32 ED			    int 21H
				_out_number:
 0278  BA 0D64 R	     1	    mov dx,offset CRLF
 027B  B4 09		     1	    mov ah,09h
 027D  CD 21		     1	    int 21H
 027F				    mov dl,ds:[si]
 027F  8A 14			    mov ah,02h
 0281  B4 02			    int 21H
 0283  CD 21			    inc si
 0285  46			    loop _out_number
 0286  E2 F7			sear_exit:
				    pop sum
 0288  5E			    ret
 0289  B9 000B			;查找失败
 028C  B2 20			sear_fail:
 028E  B4 02			    mov dx,offset temp7
 0290  CD 21			    mov ah,09h
 0292				    int 21H
 0292  8A 14			    jmp sear_exit
 0294  B4 02			;表为空
 0296  CD 21			sear_empty:
 0298  46			    mov dx,offset temp6
 0299  E2 F7			    mov ah,09h
 029B				    int 21H
 029B  8F 06 0000 R		    jmp sear_exit
 029F  C3			sear_man endp
				
 02A0				;修改联系人信息
 02A0  BA 0DB1 R		change proc near
 02A3  B4 09			    push sum;暂存联系人的人数
 02A5  CD 21			    mov dx,offset temp9
 02A7  EB F2			    mov ah,09h
				    int 21H
 02A9				
 02A9  BA 0D9B R		    ;输入要寻找的联系人
 02AC  B4 09			    mov dx,offset namemax
 02AE  CD 21			    mov ah,0ah
 02B0  EB E9			    int 21H
 02B2				
				    ;取出比较的次数
				    mov cl,_length
 02B2				    xor ch,ch
 02B2  FF 36 0000 R		    ;初始化电话簿的地址
 02B6  BA 0DEF R		    mov si,offset tel_tab
 02B9  B4 09			    add si,2
 02BB  CD 21			    mov di,seg _name
				    mov es,di
				    mov di,offset _name
 02BD  BA 0002 R		    mov bx,0
 02C0  B4 0A			    cmp sum,0
 02C2  CD 21			    je change_empty;如果sum一开始就为0，即为空的，肯定找不到
				change_loop4:
				    cmp sum,0;此时肯定不会满足条件，所以开始寻找
 02C4  8A 0E 0003 R		    je change_fail
 02C8  32 ED			    inc bx
				change_cmp:
 02CA  BE 0018 R		    push bx
 02CD  83 C6 02			    mov al,ds:[si]
 02D0  BF ---- R		    mov bl,es:[di]
 02D3  8E C7			    cmp al,bl
 02D5  BF 0004 R		    pop bx
 02D8  BB 0000			    jne change_nomatch
 02DB  83 3E 0000 R 00		    inc si
 02E0  74 5E			    inc di
 02E2				    loop change_cmp
 02E2  83 3E 0000 R 00		    jmp change_suce
 02E7  74 4E			change_nomatch:
 02E9  43			    add si,38
 02EA				    mov di,offset _name
 02EA  53			    sub sum,1
 02EB  8A 04			    jmp change_loop4
 02ED  26: 8A 1D		;查找成功
 02F0  38 D8			;找到并初始化我们要修改的联系人的位置
 02F2  5B			change_suce:
 02F3  75 06			    mov cx,bx
 02F5  46			    sub cx,1
 02F6  47			    mov si,offset tel_tab
 02F7  E2 F1			change_init:
 02F9  EB 0D			    cmp cx,0
 02FB				    je change_main
 02FB  83 C6 26			    add si,38
 02FE  BF 0004 R		    loop change_init
 0301  83 2E 0000 R 01		    push si;si保存的是我们要修改的联系人的内存位置
 0306  EB DA			
				change_main: 
				    mov dx,offset temp10
 0308				    mov ah,09h  
 0308  8B CB			    int 21H
 030A  83 E9 01			
 030D  BE 0018 R		    mov dx,si
 0310				    add dx,23
 0310  83 F9 00			    mov ah,0ah
 0313  74 06			    int 21H
 0315  83 C6 26			    
 0318  E2 F6			    mov dx,offset temp11
 031A  56			    mov ah,09h
				    int 21H
 031B				
 031B  BA 0E1B R		change_exit:
 031E  B4 09			    pop sum
 0320  CD 21			    ret
				;查找失败
 0322  8B D6			change_fail:
 0324  83 C2 17			    mov dx,offset temp7
 0327  B4 0A			    mov ah,09h
 0329  CD 21			    int 21H
				    jmp change_exit
 032B  BA 0E3F R		;表为空
 032E  B4 09			change_empty:
 0330  CD 21			    mov dx,offset temp6
				    mov ah,09h
 0332				    int 21H
 0332  8F 06 0000 R		    jmp change_exit
 0336  C3			
				change endp
 0337				code ends
 0337  BA 0DB1 R		end start
 033A  B4 09
 033C  CD 21
 033E  EB F2
 0340
 0340  BA 0D9B R
 0343  B4 09
 0345  CD 21
 0347  EB E9
 0349
 0349
Microsoft (R) Macro Assembler Version 6.11		    11/26/22 14:29:23
tempfile.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

CF . . . . . . . . . . . . . . .	Proc
clear  . . . . . . . . . . . . .	Proc
post_c . . . . . . . . . . . . .	Proc
show_menu  . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

code . . . . . . . . . . . . . .	16 Bit	 0349	  Para	  Private 
data . . . . . . . . . . . . . .	16 Bit	 0E6E	  Para	  Private 
stacks . . . . . . . . . . . . .	16 Bit	 0028	  Para	  Stack	  


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

add_man  . . . . . . . . . . . .	P Near	 00E5	  code	Length= 003D Public
  init . . . . . . . . . . . . .	L Near	 00F4	  code	
  add_loop . . . . . . . . . . .	L Near	 0105	  code	
change . . . . . . . . . . . . .	P Near	 02B2	  code	Length= 0097 Public
  change_loop4 . . . . . . . . .	L Near	 02E2	  code	
  change_cmp . . . . . . . . . .	L Near	 02EA	  code	
  change_nomatch . . . . . . . .	L Near	 02FB	  code	
  change_suce  . . . . . . . . .	L Near	 0308	  code	
  change_init  . . . . . . . . .	L Near	 0310	  code	
  change_main  . . . . . . . . .	L Near	 031B	  code	
  change_exit  . . . . . . . . .	L Near	 0332	  code	
  change_fail  . . . . . . . . .	L Near	 0337	  code	
  change_empty . . . . . . . . .	L Near	 0340	  code	
del_man  . . . . . . . . . . . .	P Near	 0122	  code	Length= 01A6 Public
  dele_loop4 . . . . . . . . . .	L Near	 0159	  code	
  dele_cmp . . . . . . . . . . .	L Near	 0161	  code	
  dele_nomatch . . . . . . . . .	L Near	 0172	  code	
  dele_brige . . . . . . . . . .	L Near	 017F	  code	
  dele_brige1  . . . . . . . . .	L Near	 0181	  code	
  dele_brige2  . . . . . . . . .	L Near	 0183	  code	
  dele_suce  . . . . . . . . . .	L Near	 0185	  code	
  dele_init  . . . . . . . . . .	L Near	 018D	  code	
  dele_init_ . . . . . . . . . .	L Near	 0197	  code	
  dele_loop  . . . . . . . . . .	L Near	 01A9	  code	
  _exchange  . . . . . . . . . .	L Near	 01B0	  code	
  _xchange . . . . . . . . . . .	L Near	 01B3	  code	
  _xchange_num . . . . . . . . .	L Near	 01C7	  code	
  dele_exit  . . . . . . . . . .	L Near	 01D0	  code	
  dele_only  . . . . . . . . . .	L Near	 01DA	  code	
  dele_fail  . . . . . . . . . .	L Near	 01EB	  code	
  dele_empty . . . . . . . . . .	L Near	 01F7	  code	
sear_man . . . . . . . . . . . .	P Near	 0203	  code	Length= 00AF Public
  sear_loop4 . . . . . . . . . .	L Near	 0233	  code	
  sear_cmp . . . . . . . . . . .	L Near	 023B	  code	
  nomatch  . . . . . . . . . . .	L Near	 024C	  code	
  sear_suce  . . . . . . . . . .	L Near	 0259	  code	
  _init  . . . . . . . . . . . .	L Near	 0261	  code	
  _output  . . . . . . . . . . .	L Near	 026B	  code	
  _out_name  . . . . . . . . . .	L Near	 027F	  code	
  _out_number  . . . . . . . . .	L Near	 0292	  code	
  sear_exit  . . . . . . . . . .	L Near	 029B	  code	
  sear_fail  . . . . . . . . . .	L Near	 02A0	  code	
  sear_empty . . . . . . . . . .	L Near	 02A9	  code	
show_book  . . . . . . . . . . .	P Near	 0080	  code	Length= 0065 Public
  show_big . . . . . . . . . . .	L Near	 0099	  code	
  show_name  . . . . . . . . . .	L Near	 00A5	  code	
  show_phonenum  . . . . . . . .	L Near	 00C0	  code	
  show_empty . . . . . . . . . .	L Near	 00D9	  code	
  show_ret . . . . . . . . . . .	L Near	 00E0	  code	


Symbols:

                N a m e                 Type     Value    Attr

CRLF . . . . . . . . . . . . . .	Byte	 0D64	  data	
_length  . . . . . . . . . . . .	Byte	 0003	  data	
_name  . . . . . . . . . . . . .	Byte	 0004	  data	
block_loop . . . . . . . . . . .	L Near	 0030	  code	
loop1  . . . . . . . . . . . . .	L Near	 0067	  code	
loop2  . . . . . . . . . . . . .	L Near	 006C	  code	
loop3  . . . . . . . . . . . . .	L Near	 0071	  code	
loop4  . . . . . . . . . . . . .	L Near	 0076	  code	
loop5  . . . . . . . . . . . . .	L Near	 007B	  code	
main_loop0 . . . . . . . . . . .	L Near	 0024	  code	
main_loop  . . . . . . . . . . .	L Near	 000A	  code	
menu1  . . . . . . . . . . . . .	Byte	 0C20	  data	
menu2  . . . . . . . . . . . . .	Byte	 0C46	  data	
menu3  . . . . . . . . . . . . .	Byte	 0C6C	  data	
menu4  . . . . . . . . . . . . .	Byte	 0CDE	  data	
menu5  . . . . . . . . . . . . .	Byte	 0D04	  data	
menu6  . . . . . . . . . . . . .	Byte	 0C92	  data	
menu7  . . . . . . . . . . . . .	Byte	 0CB8	  data	
menu . . . . . . . . . . . . . .	Byte	 0BF8	  data	
method_0 . . . . . . . . . . . .	Byte	 0D7A	  data	
method . . . . . . . . . . . . .	Byte	 0D67	  data	
namemax  . . . . . . . . . . . .	Byte	 0002	  data	
return . . . . . . . . . . . . .	L Near	 0063	  code	
start  . . . . . . . . . . . . .	L Near	 0000	  code	
sum  . . . . . . . . . . . . . .	Word	 0000	  data	
tel_num  . . . . . . . . . . . .	Byte	 0D3B	  data	
tel_tab  . . . . . . . . . . . .	Byte	 0018	  data	
temp10 . . . . . . . . . . . . .	Byte	 0E1B	  data	
temp11 . . . . . . . . . . . . .	Byte	 0E3F	  data	
temp6  . . . . . . . . . . . . .	Byte	 0D9B	  data	
temp7  . . . . . . . . . . . . .	Byte	 0DB1	  data	
temp8  . . . . . . . . . . . . .	Byte	 0DCE	  data	
temp9  . . . . . . . . . . . . .	Byte	 0DEF	  data	
temp . . . . . . . . . . . . . .	Byte	 0D27	  data	

	   0 Warnings
	   0 Errors
