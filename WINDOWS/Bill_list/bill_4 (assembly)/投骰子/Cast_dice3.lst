Microsoft (R) Macro Assembler Version 6.11		    11/26/22 22:00:55
tempfile.asm						     Page 1 - 1


				; throw the dice three times,and sort by the number of the dice

				assume ds:data,cs:code,ss:stacks

 0000				data segment
 0000 0000				sum dw 0
 0002 0000			    value1 dw 0
 0004  24			    db '$'
 0005 0000			    value2 dw 0
 0007  24			    db '$'
 0008 0000			    value3 dw 0
 000A  24			    db '$'
 000B 2D 2D 2D 2D 2D 2D			menu0 db "---------------Throw the dice-----------------",13,10
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 54 68 72
       6F 77 20 74 68 65
       20 64 69 63 65 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 0D 0A
 003B 2D 2D 2D 2D 2D 2D		    menu1 db "---------1. The first people throw.-----------",13,10
       2D 2D 2D 31 2E 20
       54 68 65 20 66 69
       72 73 74 20 70 65
       6F 70 6C 65 20 74
       68 72 6F 77 2E 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 0D 0A
 006B 2D 2D 2D 2D 2D 2D		    menu2 db "---------2. The second people throw.----------",13,10
       2D 2D 2D 32 2E 20
       54 68 65 20 73 65
       63 6F 6E 64 20 70
       65 6F 70 6C 65 20
       74 68 72 6F 77 2E
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 0D 0A
 009B 2D 2D 2D 2D 2D 2D		    menu3 db "---------3. The third people throw.-----------",13,10
       2D 2D 2D 33 2E 20
       54 68 65 20 74 68
       69 72 64 20 70 65
       6F 70 6C 65 20 74
       68 72 6F 77 2E 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 0D 0A
 00CB 2D 2D 2D 2D 2D 2D		    menu4 db "---------4. Sort.-----------------------------",13,10
       2D 2D 2D 34 2E 20
       53 6F 72 74 2E 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 0D 0A
 00FB 2D 2D 2D 2D 2D 2D		    menu5 db "---------0. Exit.-----------------------------",13,10
       2D 2D 2D 30 2E 20
       45 78 69 74 2E 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 2D 2D
       2D 2D 2D 2D 0D 0A
 012B 50 6C 65 61 73 65		    menu6 db "Please input number (0~4) : ",'$'
       20 69 6E 70 75 74
       20 6E 75 6D 62 65
       72 20 28 30 7E 34
       29 20 3A 20 24
 0148 54 68 65 20 66 69			message1 db "The first people throw the dice, the number is:",'$'
       72 73 74 20 70 65
       6F 70 6C 65 20 74
       68 72 6F 77 20 74
       68 65 20 64 69 63
       65 2C 20 74 68 65
       20 6E 75 6D 62 65
       72 20 69 73 3A 24
 0178 54 68 65 20 73 65			message2 db "The second people throw the dice, the number is:",'$'
       63 6F 6E 64 20 70
       65 6F 70 6C 65 20
       74 68 72 6F 77 20
       74 68 65 20 64 69
       63 65 2C 20 74 68
       65 20 6E 75 6D 62
       65 72 20 69 73 3A
       24
 01A9 54 68 65 20 74 68			message3 db "The third people throw the dice, the number is:",'$'
       69 72 64 20 70 65
       6F 70 6C 65 20 74
       68 72 6F 77 20 74
       68 65 20 64 69 63
       65 2C 20 74 68 65
       20 6E 75 6D 62 65
       72 20 69 73 3A 24
 01D9 0D 0A 24				CRLF db 13,10,'$'
 01DC				data ends

 0000				stacks segment stack
 0000  0014 [				dw 20 dup(?)
        0000
       ]
 0028				stacks ends

				; define macro : enter
				output_CRLF macro
				    mov 	dx,offset CRLF
				    mov 	ah,09h
				    int 	21H
				endm

				; define macro : message 
				output_message macro x
				    mov     dx,offset x
				    mov     ah,09h
				    int     21h
				endm

				; define macro: output the menu
				display_menu macro
				    mov     dx,offset menu0
				    mov     ah,09h
				    int     21H
				endm

				; define block : until input enter
				block macro
				    block_loop:
				    mov     ah,0
				    int     16h
				    cmp     ah,1ch
				    jne     block_loop
				endm

 0000				code segment
 0000				start:
 0000  B8 ---- R			mov 	ax,data
 0003  8E D8				mov 	ds,ax
 0005  B8 ---- R			mov 	ax,stacks
 0008  8E D0				mov 	ss,ax
 000A				main:
				    display_menu
 000A  BA 000B R	     1	    mov     dx,offset menu0
 000D  B4 09		     1	    mov     ah,09h
 000F  CD 21		     1	    int     21H
 0011  B4 01			    mov     ah,1
 0013  CD 21			    int     21H
 0015  50			    push    ax
				    block
 0016			     1	    block_loop:
 0016  B4 00		     1	    mov     ah,0
 0018  CD 16		     1	    int     16h
 001A  80 FC 1C		     1	    cmp     ah,1ch
 001D  75 F7		     1	    jne     block_loop
				    output_CRLF
 001F  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0022  B4 09		     1	    mov 	ah,09h
 0024  CD 21		     1	    int 	21H
 0026  58			    pop     ax

 0027  32 E4			    xor     ah,ah  
 0029  83 F8 30			    cmp     ax,0030h
 002C  75 03 E9 00AC		    je      main_return 
 0031  83 F8 31			    cmp     ax,0031h
 0034  74 14			    je      loop_1      ;1. The first people throw.
 0036  83 F8 32			    cmp     ax,0032h
 0039  74 3B			    je      loop_2      ;2. The second people throw.
 003B  83 F8 33			    cmp     ax,0033h
 003E  74 63			    je      loop_3      ;3. The third people throw.
 0040  83 F8 34			    cmp     ax,0034h
 0043  75 03 E9 0088		    je      loop_4      ;4. Sort.
 0048  EB C0			    jmp     main

 004A				loop_1:
 004A  E8 0247			    call    randget
 004D  BF 0002 R		    mov     di,offset value1
 0050  89 1D			    mov     ds:[di],bx
				    output_CRLF
 0052  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0055  B4 09		     1	    mov 	ah,09h
 0057  CD 21		     1	    int 	21H
				    output_message message1
 0059  BA 0148 R	     1	    mov     dx,offset message1
 005C  B4 09		     1	    mov     ah,09h
 005E  CD 21		     1	    int     21h
 0060  8A D3			    mov     dl,bl
 0062  B4 02			    mov     ah,2
 0064  CD 21			    int     21h
				    output_CRLF
 0066  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0069  B4 09		     1	    mov 	ah,09h
 006B  CD 21		     1	    int 	21H
				    output_CRLF
 006D  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0070  B4 09		     1	    mov 	ah,09h
 0072  CD 21		     1	    int 	21H
 0074  EB 94			    jmp     main
 0076				loop_2:
 0076  E8 021B			    call    randget
 0079  BF 0005 R		    mov     di,offset value2
 007C  89 1D			    mov     ds:[di],bx
				    output_CRLF
 007E  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0081  B4 09		     1	    mov 	ah,09h
 0083  CD 21		     1	    int 	21H
				    output_message message2
 0085  BA 0178 R	     1	    mov     dx,offset message2
 0088  B4 09		     1	    mov     ah,09h
 008A  CD 21		     1	    int     21h
 008C  8A D3			    mov     dl,bl
 008E  B4 02			    mov     ah,2
 0090  CD 21			    int     21h
				    output_CRLF
 0092  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0095  B4 09		     1	    mov 	ah,09h
 0097  CD 21		     1	    int 	21H
				    output_CRLF
 0099  BA 01D9 R	     1	    mov 	dx,offset CRLF
 009C  B4 09		     1	    mov 	ah,09h
 009E  CD 21		     1	    int 	21H
 00A0  E9 FF67			    jmp     main
 00A3				loop_3:
 00A3  E8 01EE			    call    randget
 00A6  BF 0008 R		    mov     di,offset value3
 00A9  89 1D			    mov     ds:[di],bx
				    output_CRLF
 00AB  BA 01D9 R	     1	    mov 	dx,offset CRLF
 00AE  B4 09		     1	    mov 	ah,09h
 00B0  CD 21		     1	    int 	21H
				    output_message message3
 00B2  BA 01A9 R	     1	    mov     dx,offset message3
 00B5  B4 09		     1	    mov     ah,09h
 00B7  CD 21		     1	    int     21h
 00B9  8A D3			    mov     dl,bl
 00BB  B4 02			    mov     ah,2
 00BD  CD 21			    int     21h
				    output_CRLF
 00BF  BA 01D9 R	     1	    mov 	dx,offset CRLF
 00C2  B4 09		     1	    mov 	ah,09h
 00C4  CD 21		     1	    int 	21H
				    output_CRLF
 00C6  BA 01D9 R	     1	    mov 	dx,offset CRLF
 00C9  B4 09		     1	    mov 	ah,09h
 00CB  CD 21		     1	    int 	21H
 00CD  E9 FF3A			    jmp     main
 00D0				loop_4:
 00D0  E8 000E			    call    sort
				    output_CRLF
 00D3  BA 01D9 R	     1	    mov 	dx,offset CRLF
 00D6  B4 09		     1	    mov 	ah,09h
 00D8  CD 21		     1	    int 	21H
 00DA  E9 FF2D			    jmp     main




 00DD				main_return:
 00DD  B4 4C				mov 	ah,4ch
 00DF  CD 21				int 	21H

				; sort the number of dices
 00E1				sort proc near
 00E1  50			    push    ax
 00E2  53			    push    bx
 00E3  51			    push    cx
 00E4  A1 0002 R		    mov     ax,value1;4
 00E7  8B 1E 0005 R		    mov     bx,value2;6
 00EB  8B 0E 0008 R		    mov     cx,value3;4
				    
 00EF  3B C3			    cmp     ax,bx
 00F1  7D 03 E9 00CE		    jl      b_a
 00F6  3B D9			    cmp     bx,cx
 00F8  7C 42			    jl      c_b
				    output_message message1
 00FA  BA 0148 R	     1	    mov     dx,offset message1
 00FD  B4 09		     1	    mov     ah,09h
 00FF  CD 21		     1	    int     21h
				    output_message value1
 0101  BA 0002 R	     1	    mov     dx,offset value1
 0104  B4 09		     1	    mov     ah,09h
 0106  CD 21		     1	    int     21h
				    output_CRLF
 0108  BA 01D9 R	     1	    mov 	dx,offset CRLF
 010B  B4 09		     1	    mov 	ah,09h
 010D  CD 21		     1	    int 	21H
				    output_message message2
 010F  BA 0178 R	     1	    mov     dx,offset message2
 0112  B4 09		     1	    mov     ah,09h
 0114  CD 21		     1	    int     21h
				    output_message value2
 0116  BA 0005 R	     1	    mov     dx,offset value2
 0119  B4 09		     1	    mov     ah,09h
 011B  CD 21		     1	    int     21h
				    output_CRLF
 011D  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0120  B4 09		     1	    mov 	ah,09h
 0122  CD 21		     1	    int 	21H
				    output_message message3
 0124  BA 01A9 R	     1	    mov     dx,offset message3
 0127  B4 09		     1	    mov     ah,09h
 0129  CD 21		     1	    int     21h
				    output_message value3
 012B  BA 0008 R	     1	    mov     dx,offset value3
 012E  B4 09		     1	    mov     ah,09h
 0130  CD 21		     1	    int     21h
				    output_CRLF
 0132  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0135  B4 09		     1	    mov 	ah,09h
 0137  CD 21		     1	    int 	21H
 0139  E9 0154			    jmp     sort_ret
 013C				c_b:
 013C  3B C1			    cmp     ax,cx
 013E  7C 42			    jl      c_a_b
				    output_message message1
 0140  BA 0148 R	     1	    mov     dx,offset message1
 0143  B4 09		     1	    mov     ah,09h
 0145  CD 21		     1	    int     21h
				    output_message value1
 0147  BA 0002 R	     1	    mov     dx,offset value1
 014A  B4 09		     1	    mov     ah,09h
 014C  CD 21		     1	    int     21h
				    output_CRLF
 014E  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0151  B4 09		     1	    mov 	ah,09h
 0153  CD 21		     1	    int 	21H
				    output_message message3
 0155  BA 01A9 R	     1	    mov     dx,offset message3
 0158  B4 09		     1	    mov     ah,09h
 015A  CD 21		     1	    int     21h
				    output_message value3
 015C  BA 0008 R	     1	    mov     dx,offset value3
 015F  B4 09		     1	    mov     ah,09h
 0161  CD 21		     1	    int     21h
				    output_CRLF
 0163  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0166  B4 09		     1	    mov 	ah,09h
 0168  CD 21		     1	    int 	21H
				    output_message message2
 016A  BA 0178 R	     1	    mov     dx,offset message2
 016D  B4 09		     1	    mov     ah,09h
 016F  CD 21		     1	    int     21h
				    output_message value2
 0171  BA 0005 R	     1	    mov     dx,offset value2
 0174  B4 09		     1	    mov     ah,09h
 0176  CD 21		     1	    int     21h
				    output_CRLF
 0178  BA 01D9 R	     1	    mov 	dx,offset CRLF
 017B  B4 09		     1	    mov 	ah,09h
 017D  CD 21		     1	    int 	21H
 017F  E9 010E			    jmp     sort_ret
 0182				c_a_b:
				    output_message message3
 0182  BA 01A9 R	     1	    mov     dx,offset message3
 0185  B4 09		     1	    mov     ah,09h
 0187  CD 21		     1	    int     21h
				    output_message value3
 0189  BA 0008 R	     1	    mov     dx,offset value3
 018C  B4 09		     1	    mov     ah,09h
 018E  CD 21		     1	    int     21h
				    output_CRLF
 0190  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0193  B4 09		     1	    mov 	ah,09h
 0195  CD 21		     1	    int 	21H
				    output_message message1
 0197  BA 0148 R	     1	    mov     dx,offset message1
 019A  B4 09		     1	    mov     ah,09h
 019C  CD 21		     1	    int     21h
				    output_message value1
 019E  BA 0002 R	     1	    mov     dx,offset value1
 01A1  B4 09		     1	    mov     ah,09h
 01A3  CD 21		     1	    int     21h
				    output_CRLF
 01A5  BA 01D9 R	     1	    mov 	dx,offset CRLF
 01A8  B4 09		     1	    mov 	ah,09h
 01AA  CD 21		     1	    int 	21H
				    output_message message2
 01AC  BA 0178 R	     1	    mov     dx,offset message2
 01AF  B4 09		     1	    mov     ah,09h
 01B1  CD 21		     1	    int     21h
				    output_message value2
 01B3  BA 0005 R	     1	    mov     dx,offset value2
 01B6  B4 09		     1	    mov     ah,09h
 01B8  CD 21		     1	    int     21h
				    output_CRLF
 01BA  BA 01D9 R	     1	    mov 	dx,offset CRLF
 01BD  B4 09		     1	    mov 	ah,09h
 01BF  CD 21		     1	    int 	21H
 01C1  E9 00CC			    jmp     sort_ret
 01C4				b_a:
 01C4  3B C1			    cmp     ax,cx
 01C6  7C 42			    jl      c_a
				    output_message message2
 01C8  BA 0178 R	     1	    mov     dx,offset message2
 01CB  B4 09		     1	    mov     ah,09h
 01CD  CD 21		     1	    int     21h
				    output_message value2
 01CF  BA 0005 R	     1	    mov     dx,offset value2
 01D2  B4 09		     1	    mov     ah,09h
 01D4  CD 21		     1	    int     21h
				    output_CRLF
 01D6  BA 01D9 R	     1	    mov 	dx,offset CRLF
 01D9  B4 09		     1	    mov 	ah,09h
 01DB  CD 21		     1	    int 	21H
				    output_message message1
 01DD  BA 0148 R	     1	    mov     dx,offset message1
 01E0  B4 09		     1	    mov     ah,09h
 01E2  CD 21		     1	    int     21h
				    output_message value1
 01E4  BA 0002 R	     1	    mov     dx,offset value1
 01E7  B4 09		     1	    mov     ah,09h
 01E9  CD 21		     1	    int     21h
				    output_CRLF
 01EB  BA 01D9 R	     1	    mov 	dx,offset CRLF
 01EE  B4 09		     1	    mov 	ah,09h
 01F0  CD 21		     1	    int 	21H
				    output_message message3
 01F2  BA 01A9 R	     1	    mov     dx,offset message3
 01F5  B4 09		     1	    mov     ah,09h
 01F7  CD 21		     1	    int     21h
				    output_message value3
 01F9  BA 0008 R	     1	    mov     dx,offset value3
 01FC  B4 09		     1	    mov     ah,09h
 01FE  CD 21		     1	    int     21h
				    output_CRLF
 0200  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0203  B4 09		     1	    mov 	ah,09h
 0205  CD 21		     1	    int 	21H
 0207  E9 0086			    jmp     sort_ret
 020A				c_a:
 020A  3B D9			    cmp     bx,cx
 020C  7C 41			    jl      c_b_a
				    output_message message2
 020E  BA 0178 R	     1	    mov     dx,offset message2
 0211  B4 09		     1	    mov     ah,09h
 0213  CD 21		     1	    int     21h
				    output_message value2
 0215  BA 0005 R	     1	    mov     dx,offset value2
 0218  B4 09		     1	    mov     ah,09h
 021A  CD 21		     1	    int     21h
				    output_CRLF
 021C  BA 01D9 R	     1	    mov 	dx,offset CRLF
 021F  B4 09		     1	    mov 	ah,09h
 0221  CD 21		     1	    int 	21H
				    output_message message3
 0223  BA 01A9 R	     1	    mov     dx,offset message3
 0226  B4 09		     1	    mov     ah,09h
 0228  CD 21		     1	    int     21h
				    output_message value3
 022A  BA 0008 R	     1	    mov     dx,offset value3
 022D  B4 09		     1	    mov     ah,09h
 022F  CD 21		     1	    int     21h
				    output_CRLF
 0231  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0234  B4 09		     1	    mov 	ah,09h
 0236  CD 21		     1	    int 	21H
				    output_message message1
 0238  BA 0148 R	     1	    mov     dx,offset message1
 023B  B4 09		     1	    mov     ah,09h
 023D  CD 21		     1	    int     21h
				    output_message value1
 023F  BA 0002 R	     1	    mov     dx,offset value1
 0242  B4 09		     1	    mov     ah,09h
 0244  CD 21		     1	    int     21h
				    output_CRLF
 0246  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0249  B4 09		     1	    mov 	ah,09h
 024B  CD 21		     1	    int 	21H
 024D  EB 41			    jmp     sort_ret
 024F				c_b_a:
				    output_message message3
 024F  BA 01A9 R	     1	    mov     dx,offset message3
 0252  B4 09		     1	    mov     ah,09h
 0254  CD 21		     1	    int     21h
				    output_message value3
 0256  BA 0008 R	     1	    mov     dx,offset value3
 0259  B4 09		     1	    mov     ah,09h
 025B  CD 21		     1	    int     21h
				    output_CRLF
 025D  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0260  B4 09		     1	    mov 	ah,09h
 0262  CD 21		     1	    int 	21H
				    output_message message2
 0264  BA 0178 R	     1	    mov     dx,offset message2
 0267  B4 09		     1	    mov     ah,09h
 0269  CD 21		     1	    int     21h
				    output_message value2
 026B  BA 0005 R	     1	    mov     dx,offset value2
 026E  B4 09		     1	    mov     ah,09h
 0270  CD 21		     1	    int     21h
				    output_CRLF
 0272  BA 01D9 R	     1	    mov 	dx,offset CRLF
 0275  B4 09		     1	    mov 	ah,09h
 0277  CD 21		     1	    int 	21H
				    output_message message1
 0279  BA 0148 R	     1	    mov     dx,offset message1
 027C  B4 09		     1	    mov     ah,09h
 027E  CD 21		     1	    int     21h
				    output_message value1
 0280  BA 0002 R	     1	    mov     dx,offset value1
 0283  B4 09		     1	    mov     ah,09h
 0285  CD 21		     1	    int     21h
				    output_CRLF
 0287  BA 01D9 R	     1	    mov 	dx,offset CRLF
 028A  B4 09		     1	    mov 	ah,09h
 028C  CD 21		     1	    int 	21H
 028E  EB 00			    jmp     sort_ret

				    ; if a >= b
				    ;   if b >= c
				    ;       cout << a << b << c;
				    ;   else                            // c_b
				    ;       if a >= c
				    ;           cout << a << c << b;
				    ;       else
				    ;           cout << c << a << b;
				    ; else                              // b_a
				    ;   if a >= c
				    ;       cout << b << a << c;
				    ;   else                            // c_a
				    ;       if b >= c
				    ;           cout << b << c << a;
				    ;       else // b < c
				    ;           cout << c << b << a;
				    
 0290				sort_ret:
 0290  59			    pop     cx
 0291  5B			    pop     bx
 0292  58			    pop     ax
 0293  C3			    ret
 0294				sort endp

				; generate the random
				; return value is in bx
 0294				randget proc near
 0294  E8 001C			    call    delay
 0297  50			    push    ax
 0298  52			    push    dx
 0299  B4 00				mov 	ah,00h
 029B  CD 1A				int 	1ah
					
 029D  8B C2				mov 	ax,dx	
 029F  80 E4 03				and 	ah,3
 02A2  B2 06				mov 	dl,6
 02A4  F6 F2				div 	dl
 02A6  8A C4				mov 	al,ah
 02A8  32 E4				xor 	ah,ah
 02AA  40				inc 	ax
 02AB  83 C0 30				add 	ax,'0'
 02AE  8B D8			    mov     bx,ax
 02B0  5A			    pop     dx
 02B1  58			    pop     ax
 02B2  C3			    ret

 02B3				randget endp


				; delay the time 
 02B3				delay proc near 
 02B3  52			    push    dx
 02B4  50			    push    ax
 02B5  BA 0010			    mov 	dx,0010h
 02B8  B8 0000			    mov 	ax,0
 02BB				s1:
 02BB  83 E8 01			    sub 	ax,1
 02BE  83 DA 00			    sbb 	dx,0
 02C1  83 F8 00			    cmp 	ax,0
 02C4  75 F5			    jne 	s1
 02C6  83 FA 00			    cmp 	dx,0
 02C9  75 F0			    jne 	s1
 02CB  58			    pop     ax
 02CC  5A			    pop     dx
 02CD  C3			    ret
 02CE				delay endp
					
 02CE				code ends
				end start


Microsoft (R) Macro Assembler Version 6.11		    11/26/22 22:00:55
tempfile.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

block  . . . . . . . . . . . . .	Proc
display_menu . . . . . . . . . .	Proc
output_CRLF  . . . . . . . . . .	Proc
output_message . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

code . . . . . . . . . . . . . .	16 Bit	 02CE	  Para	  Private 
data . . . . . . . . . . . . . .	16 Bit	 01DC	  Para	  Private 
stacks . . . . . . . . . . . . .	16 Bit	 0028	  Para	  Stack	  


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

delay  . . . . . . . . . . . . .	P Near	 02B3	  code	Length= 001B Public
  s1 . . . . . . . . . . . . . .	L Near	 02BB	  code	
randget  . . . . . . . . . . . .	P Near	 0294	  code	Length= 001F Public
sort . . . . . . . . . . . . . .	P Near	 00E1	  code	Length= 01B3 Public
  c_b  . . . . . . . . . . . . .	L Near	 013C	  code	
  c_a_b  . . . . . . . . . . . .	L Near	 0182	  code	
  b_a  . . . . . . . . . . . . .	L Near	 01C4	  code	
  c_a  . . . . . . . . . . . . .	L Near	 020A	  code	
  c_b_a  . . . . . . . . . . . .	L Near	 024F	  code	
  sort_ret . . . . . . . . . . .	L Near	 0290	  code	


Symbols:

                N a m e                 Type     Value    Attr

CRLF . . . . . . . . . . . . . .	Byte	 01D9	  data	
block_loop . . . . . . . . . . .	L Near	 0016	  code	
loop_1 . . . . . . . . . . . . .	L Near	 004A	  code	
loop_2 . . . . . . . . . . . . .	L Near	 0076	  code	
loop_3 . . . . . . . . . . . . .	L Near	 00A3	  code	
loop_4 . . . . . . . . . . . . .	L Near	 00D0	  code	
main_return  . . . . . . . . . .	L Near	 00DD	  code	
main . . . . . . . . . . . . . .	L Near	 000A	  code	
menu0  . . . . . . . . . . . . .	Byte	 000B	  data	
menu1  . . . . . . . . . . . . .	Byte	 003B	  data	
menu2  . . . . . . . . . . . . .	Byte	 006B	  data	
menu3  . . . . . . . . . . . . .	Byte	 009B	  data	
menu4  . . . . . . . . . . . . .	Byte	 00CB	  data	
menu5  . . . . . . . . . . . . .	Byte	 00FB	  data	
menu6  . . . . . . . . . . . . .	Byte	 012B	  data	
message1 . . . . . . . . . . . .	Byte	 0148	  data	
message2 . . . . . . . . . . . .	Byte	 0178	  data	
message3 . . . . . . . . . . . .	Byte	 01A9	  data	
start  . . . . . . . . . . . . .	L Near	 0000	  code	
sum  . . . . . . . . . . . . . .	Word	 0000	  data	
value1 . . . . . . . . . . . . .	Word	 0002	  data	
value2 . . . . . . . . . . . . .	Word	 0005	  data	
value3 . . . . . . . . . . . . .	Word	 0008	  data	

	   0 Warnings
	   0 Errors
